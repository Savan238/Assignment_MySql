show databases;
create database Sales_Data;
use sales_data;
create table sales_info (  salesman_id int primary key,
        name varchar(25), city varchar(20),
        comission decimal(15,15)
       );

select * from sales_info;
insert into sales_info ( salesman_id,name,city,comission) 
values (5001, "James Hoog" ,"New York", 0.15),
	   ( 5002 ,"Nail Knite","Paris",0.13),
	    (5005,"Pit Alex","London " ,0.11),
        (5006,"Mc Lyon","Paris",0.14),
        (5007,"Paul Adam", "Rome " ,0.13),
        (5003,"Lauson Hen","San Jose",0.12);
use sales_data;
show tables;

drop table order_info;
drop table order_infoo;

create table Order_info ( order_no int , purch_amt decimal (8,2)
                          , ord_date date ,customer_id int , salesman_id int);

select * from  Order_info;

insert into Order_info (order_no , purch_amt, ord_date, customer_id , salesman_id)
values ( 70001, 150.5 , "2012-10-05" , 3005 , 5002),
(70009, 270.65 ,  "2012-09-10" ,  3001, 5005),
(70002, 65.26  ,  "2012-10-05"  ,3002  , 5001),
(70004, 110.5  ,  "2012-08-17"  ,3009  , 5003),
(70007, 948.5  ,  "2012-09-10"  ,3005  , 5002),
(70005, 2400.6 ,  "2012-07-27"  ,3007  , 5001),
(70008, 5760   ,  "2012-09-10"  ,3002  , 5001),
(70010, 1983.43,  "2012-10-10"  ,3004  , 5006),
(70003, 2480.4 ,  "2012-10-10"  ,3009  , 5003),
(70012, 250.45 ,  "2012-06-27"  ,3008  , 5002),
(70011, 75.29  ,  "2012-08-17"  ,3003  , 5007),
(70013, 3045.6 ,  "2012-04-25"  ,3002  , 5001);
select * from Order_info;
                       
## (1.) write a SQL query to find all the orders issued by 
#the salesman 'Paul Adam'. 
#Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
  
select * from  Order_info where salesman_id = (select salesman_id from sales_info where name = "Paul Adam");

## (2) write a SQL query to find all orders generated by London-based salespeople. 
#Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

select * from  Order_info where salesman_id in (select salesman_id from sales_info where city ="London " or city = "Paris" );

## (3) write a SQL query to find all orders generated by the salespeople 
#who may work for customers whose id is 3007 or 3008.  Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

select * from Order_info where salesman_id in (select salesman_id from Order_info where customer_id = 3007 or customer_id = 3008);

## write a SQL query to find all the orders generated in New York city. 
#Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

select * from Order_info where salesman_id in (select salesman_id from sales_info where city = "New York");

## (4) write a SQL query to determine the commission of the salespeople in Paris. Return commission.

select comission from sales_info where city = "Paris" ;

create table Customer_Table ( customer_id  int , cust_name varchar(30) ,
                               city varchar(15) , grade  int , salesman_id int);
                               
insert into Customer_Table ( customer_id, cust_name ,city, grade , salesman_id )
values ( 3002 , "Nick Rimando" ,   'NewYork'   ,   100  ,  50010),
       ( 3007  ,'Brad Davis'   ,   'NewYork' ,   200  ,  5001),
       ( 3005  ,'Graham Zusi'  ,   'California' ,   200  ,  5002),
       ( 3008  ,'Julian Green' ,   'London'     ,   300  ,  5002),
       ( 3004  ,'Fabian Johnson',  'Paris'      ,   300  ,  5006),
       ( 3009  ,'Geoff Cameron'  , 'Berlin'     ,   100  ,  5003),
       ( 3003  ,'Jozy Altidor'   , 'Moscow'     ,  200   ,  5007),
       ( 3001  ,'Brad Guzan'     , 'London'     ,   null ,  5005);
       
 select * from Customer_Table;
 
 ## (1) write a SQL query to count the number of customers 
# with grades above the average in New York City.
# Return grade and count.

select grade , count(*) from Customer_Table group by grade having grade > (select avg(grade) from Customer_Table where city = "NewYork"); 

## (2) write a SQL query to find those salespeople who earned the maximum commission. 
## Return ord_no, purch_amt, ord_date, and salesman_id. 

select max(comission) from sales_info ;

select order_no, purch_amt, ord_date,salesman_id from Order_info where salesman_id = 
(select salesman_id from sales_info where comission = (select max(comission) from sales_info));

## (3)  write a SQL query to find those salespeople who earned the minimum commission. 
## Return ord_no, purch_amt, ord_date, and salesman_id. 

select order_no, purch_amt, ord_date,salesman_id from Order_info where salesman_id = (select salesman_id from sales_info 
where comission = ( select min(comission) from sales_info )); 

## (4)  write sql query to find all those customers who have different grades than any customers
# who lives in Dallas city. Return customer_id, cust_name ,city, grade an salesman_id.

select * from Customer_Table where not grade = ANY (select grade from Customer_Table where city = "Dealas") ;

## (5) write sql query to calculate total order amount of genrated by salesperson.
# Salesperson should be from the cities where customers reside.
# Rerturn salesperosn name, city and total order amount.

select sales_info.name , sales_info.city , subquery1. total_amount from sales_info ,
(select salesman_id , sum(purch_amt) as total_amount from Order_info group by salesman_id) subquery1
where subquery1.salesman_id = sales_info.salesman_id and sales_info.city in (select distinct city from Customer_Table); 


## (6)write a SQL query to find the details of an order. 
#Return order_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.

select order_no, ord_date, purch_amt, cust_name, grade, name as "Salesman_Name ", comission  from 
Order_info inner join Customer_Table on Order_info.customer_id = Customer_Table.customer_id
inner join sales_info on sales_info.salesman_id = Order_info.salesman_id;

## (7) write a SQL query to find those orders where every order amount is less than the maximum order amount of 
#a customer who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.


select order_no, purch_amt, ord_date, customer_id , salesman_id from Order_info where purch_amt < 
(select max(purch_amt) from Order_info where salesman_id in (select salesman_id from sales_info where city = "London" ));

## (8) write a SQL query to find those orders where purchase amount exists between 500 to 2000
# Return order_no, puch_amt,cust_name and city.

select o.order_no, o.purch_amt,c.cust_name , c.city from Order_info o ,Customer_Table c 
where o.customer_id = c.customer_id and o.purch_amt between 500 and 2000;

##(9) Using of natural join

select * from Order_info 
natural join sales_info
natural join Customer_Table;

### (10) write SQL Query to display the customer name , customer  city,grade ,salesman ,salesman city . 
# The result shoulde be sorted by accending customer_id.
use sales_data;
select * from Order_info; 
select * from sales_info;
select * from Customer_Table;

select customer_id,c.cust_name as "Customer_name" , c.city, c.grade ,s.name as "Salesman_name" , s.salesman_id from Customer_Table as c
inner join sales_info as  s on c.salesman_id = s.salesman_id  order by customer_id;

## (11) write sql query to find those customers with a grade less than 300.
# Return cust_name , customer city ,grade , salsman, salesman city ,
# The result shoulde be sorted by accending customer_id.

select customer_id,c.cust_name as "Customer_name" , c.city, c.grade ,s.name as "Salesman_name" from Customer_Table as c
left outer join sales_info as  s on c.salesman_id = s.salesman_id  where grade < 300 order by customer_id ;

## (12) Write a SQL statement to make a report with   customer name, city, order number, order date, and order amount   
# in ascending order according to the order date   to 
# determine whether any of the existing customers have placed an order or not.

select ord_date, c.cust_name, c.city, o.order_no, o.purch_amt, o.ord_date from Customer_Table as c
inner join Order_info o on  c.customer_id = o.customer_id order by ord_date;



	

 

